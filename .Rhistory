right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, x_new = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) out <- find_outliers(x, smax = where)[[4]]
# no outliers
else{
out <- x
}
out
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
# ueda_index
# x is a numeric vector
# smax is the maximum number of outliers to be detected
# returns a list with 2 components:
#          (1) index TRUE/FALSE of outliers; and
#          (2) the position of the outliers in the data
ueda_index <- function(x, smax = 3){
res <- ueda_remove(x = x, smax = smax)
index <- !x %in% res
positions <- which(index)
list(index = index, positions = positions)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
ueda_index(x, smax = 5)
# ueda_index
# x is a numeric vector
# smax is the maximum number of outliers to be detected
# returns a list with 2 components:
#          (1) index TRUE/FALSE of outliers; and
#          (2) the position of the outliers in the data
ueda_index <- function(x, smax = 3){
res <- ueda_remove(x = x, smax = smax)
index <- !x %in% res
list(index = index, positions = which(index))
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
ueda_index(x, smax = 5)
ueda_remove(x, smax = 5)
# find outliers given a vector x using Ueda's method
# x is a vector; smax is the maximum number of outliers
# na.rm is passed when calculating mean(x, na.rm = na.rm)
find_ueda_outliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, x_new = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
find_ueda_outliers(x, smax = 5)
find_ueda_outliers(x, smax = 5)
require(ggplot2)
?ggplot2
require(pROC)
?pROC
?mean
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
ueda_remove(x, smax = 5)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
# random seed for reproducibility
set.seed(13)
# introduce 5 outliers
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
# shuffle the data
x <- sample(x)
# removes up to 5 outliers
ueda_remove(x, smax = 5)
ueda_index()
ueda_index(x)
ueda_index(x, smax = 5)
find_ueda_outliers(x, smax = 5)
?mean
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
if (!require('devtools')) install.packages('devtools')
devtools::install_github('fhernanb/ueda', force=TRUE)
if (!require('devtools')) install.packages('devtools')
devtools::install_github('jivelez/ueda', force=TRUE)
require(ueda)
library(help = 'ueda')
## download and install
if(!require('devtools')) install.packages('devtools')
devtools::install_github('jivelez/ueda', force=TRUE)
## load
require(ueda)
## check help
library(help = 'ueda')
## load
require(ueda)
## example
set.seed(13)
# introduce 5 outliers
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
# shuffle the data
x <- sample(x)
x
# removes up to 5 outliers
ueda_remove(x, smax = 5)
# get indexes
ueda_index(x, smax = 5)
# find outliers and get full output
find_ueda_outliers(x, smax = 5)
require(knitr)
knitr::opts_chunk$set(echo = TRUE)
## download and install
if(!require('devtools')) install.packages('devtools')
if(!require('ueda')) devtools::install_github('jivelez/ueda', force = TRUE)
## load
require(ueda)
find_ueda_outliers
?find_ueda_outliers
require(ueda)
?find_ueda_outliers
library(ueda)
library(ueda)
## download and install
if(!require('devtools')) install.packages('devtools')
if(!require('ueda')) devtools::install_github('jivelez/ueda', force = TRUE)
## load
library(ueda)
?ueda_index
cols
dput(cols)
knitr::opts_chunk$set(echo = TRUE)
## selección de los datos y operaciones
d <- d[,-1]
knitr::opts_chunk$set(echo = TRUE)
require(knitr)
knitr::include_graphics("https://images-na.ssl-images-amazon.com/images/I/41vRlYmYYxL._SX334_BO1,204,203,200_.jpg")
require(knitr)
knitr::include_graphics("https://miro.medium.com/max/1540/0*IS9xKHt83nuERC9P")
## paquetes para este laboratorio
if(!require(rpart)) install.packages('rpart')
require(rpart)
if(!require(rattle)) install.packages('rattle')
require(rattle)
if(!require(rpart.plot)) install.packages('rpart.plot')
require(rpart.plot)
if(!require(party)) install.packages('party')
require(party)
if(!require(partykit)) install.packages('partykit')
require(partykit)
if(!require(caret)) install.packages('caret')
require(caret)
if(!require(vip)) install.packages('vip')
require(vip)
## load functions
source('https://www.dropbox.com/s/xclvdugfbrf5ryn/logistic-functions.R?dl=1')
## lectura de datos
d <- read.table("https://www.dropbox.com/s/bxea58hj951vi7k/datos-p1-caso2.txt?dl=1",
header = TRUE)
## primeras 3 filas
head(d, 3)
## variable y
with(d, table(y))
p <- apply(d[,-c(1, 2)], 2, tapply, d$y, function(x) 100*mean(x == 1))
p <- t(p)
freq <- data.frame(symptom = rep(1:NROW(p), 2), p = c(p[,1], p[,2]), adhd = rep(c('no', 'yes'), each = 20))
require(ggplot2)
ggplot(freq, aes(x = symptom, y = p, fill = adhd, col - adhd)) + geom_line(aes(color = adhd)) +
ylab("Percentage (x100)") +
theme_minimal()
## selección de los datos y operaciones
d <- d[,-1]
d[,-1] <- apply(d[,-1], 2, as.factor)
d$y <- factor(d$y, levels = c('yes', 'no'))
## crear particion
set.seed(123)
intrain <- createDataPartition(y = d$y, p= 0.7, list = FALSE)
training <- d[intrain,]
testing <- d[-intrain,]
library(ueda)
devtools::build_manual()
library(help = 'ueda')
?ueda_index()
library(ueda)
devtools::build_manual()
install.packages("pkgdown")
# Install development version from GitHub
devtools::install_github("r-lib/pkgdown")
require(pkgdown)
usethis::use_pkgdown()
usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
library(ueda)
.Last.error.trace
?mean
library(ueda)
library(ueda)
devtools::build_manual()
pkgdown::build_site()
.Last.error.trace
library(ueda)
devtools::build_manual()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
require(ueda)
?find_ueda_outliers
# random seed for reproducibility
set.seed(13)
# introduce 5 outliers
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
# shuffle the data
x <- sample(x)
# removes up to 5 outliers
find_ueda_outliers(x, smax = 5, na.rm = TRUE)
x <- sample(x)
# removes up to 5 outliers
find_ueda_outliers(x, smax = 5)
500*200
if(!require('devtools')) install.packages('devtools')
if(!require('ueda')) devtools::install_github('jivelez/ueda', force = TRUE)
require(ueda)
if(!require('devtools')) install.packages('devtools')
if(!require('ueda')) devtools::install_github('jivelez/ueda', force = TRUE)
require(ueda)
?ueda_index
# random seed for reproducibility
set.seed(13)
# introduce 5 outliers
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
# shuffle the data
x <- sample(x)
ueda_index(x, smax = 5)
x
ueda_remove(x, smax = 5)
lengtH(x)
length(x)
length(ueda_remove(x, smax = 5))
ueda_remove(x, smax = 1)
length(ueda_remove(x, smax = 1))
length(ueda_remove(x, smax = 2))
length(ueda_remove(x, smax = 3))
length(ueda_remove(x, smax = 4))
ueda_remove(x, smax = 4)
find_ueda_outliers(x, smax = 5)
plot(x)
plot(x, las = 1)
plot(find_ueda_outliers(x, smax = 5)$x_new, las = 1)
find_ueda_outliers(x, smax = 5)$x_new
plot(ueda_remove(x, smax = 5), las = 1)
x
ueda_index(x, smax  =5)
ueda_index(x, smax  =5)$position
plot(x[-ueda_index(x, smax  =5)$position])
plot(x, las = 1)
plot(x[-ueda_index(x, smax  =5)$position])
plot(x[-ueda_index(x, smax  =5)$position], las = 1)
library(ueda)
library(ueda)
library(ueda)
usethis::use_pkgdown()
pkgdown::build_site()
.Last.error.trace
require(ueda)
?ueda_index
.Last.error.trace
library(ueda)
usethis::use_pkgdown()
pkgdown::build_site()
library(ueda)
devtools::build_manual()
library(ueda)
pkgdown::build_site()
.Last.error.trace
library(devtools)
install_github('r-lib/downlit')
install.packages("pkgdown")
install.packages("pkgdown")
require(pkgdown)
usethis::use_pkgdown()
pkgdown::build_site()
library(ueda)
ueda_index
result <- ueda_index(x, smax = 5)
result
result$indexes
#' Find indexes and positions
#'
#' This function allows identifying the indexes and positions of outliers in a numeric vector.
#'
#' @param x A numeric vector
#' @param smax The maximum number of outliers to be detected. By default, smax = 3.
#'
#' @return A list with 2 components:
#'
#' @return index  Boolean (TRUE/FALSE) indicating whether each observation is an outlier.
#'
#' @return position The position of the outliers in the data.
#' @export
#'
#' @references Marmolejo-Ramos, F., Vélez, J.I. & Romão, X. Automatic detection of discordant outliers via the Ueda’s method. J Stat Distrib App 2, 8 (2015). \url{https://doi.org/10.1186/s40488-015-0031-y}
#'
#'
#' @examples
#' # random seed for reproducibility
#' set.seed(13)
#' # introduce 5 outliers
#' x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
#' # shuffle the data
#' x <- sample(x)
#' # find indexes
#' ueda_index(x, smax = 5)
ueda_index <- function(x, smax = 5){
res <- ueda_remove(x = x, smax = smax)
index <- !x %in% res
positions <- which(index)
list(indexes = index, positions = positions)
}
result <- ueda_index(x, smax = 5)
result
result$indexes
## create some data
set.seed(721)
y <- sample(0:1, length(x), replace = TRUE)
d <- data.frame(x = x, y = y)
d
# get indexes and positions of up to 5 outliers
result <- ueda_index(x, smax = 5)
result
## indexes of outliers
idx <- result$indexes
idx
subset(d, idx)
subset(d, !idx)
library(ueda)
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
library(ueda)
library(ueda)
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
library(ueda)
usethis::use_pkgdown()
pkgdown::build_site()
library(ueda)
pkgdown::build_site()
if(!require('devtools')) install.packages('devtools')
if(!require('ueda')) devtools::install_github('jivelez/ueda', force = TRUE)
library(help = 'ueda')
?pROC
library(help = 'pROC')
usethis::use_pkgdown()
library(ueda)
library(ueda)
pkgdown::build_site()
citation('ueda')
usethis::use_citation()
citation('stests')
citation('pROC')
citation('epicalc')
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
citation('pROC')
library(ueda)
library(ueda)
library(ueda)
library(ueda)
citation('ueda')
library(ueda)
library(ueda)
usethis::use_pkgdown()
pkgdown::build_site()
require(ueda)
citation('ueda')
print(ueda,
bibtex=TRUE)
citation(ueda,
bibtex=TRUE)
citation(citation('ueda'),
bibtex=TRUE)
toBibtex('ueda')
toBibtex(citation('ueda'))
x <- scan()
x
median(x)
range(x)
diff(range(x))
sum(x)
mean(x)
library(ueda)
usethis::use_pkgdown()
pkgdown::build_site()
