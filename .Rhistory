findOutliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, newx = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
findOutliers(x, smax = 5)
# find outliers given a vector x using Ueda's method
# x is a vector; smax is the maximum number of outliers
# na.rm is passed when calculating mean(x, na.rm = na.rm)
find_outliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, newx = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
ueda_index(x, smax = 5)
ueda_remove(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) invisible(find_outliers(x, smax = where)[[4]])
# no outliers
else{
invisible(x)
}
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) out <- find_outliers(x, smax = where)[[4]]
# no outliers
else{
out <- x
}
out
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) out <- find_outliers(x, smax = where)[[4]]
# no outliers
else{
out <- x
}
out
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) out <- find_outliers(x, smax = where)[[4]]
# no outliers
else{
out <- x
}
out
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
# find outliers given a vector x using Ueda's method
# x is a vector; smax is the maximum number of outliers
# na.rm is passed when calculating mean(x, na.rm = na.rm)
find_outliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, newx = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
# find outliers given a vector x using Ueda's method
# x is a vector; smax is the maximum number of outliers
# na.rm is passed when calculating mean(x, na.rm = na.rm)
find_outliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, x_new = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
#  function to automatically detect outliers using Ueda's method
#  x is the data (a vector)
#  smax is the maximum number of outliers to be detected
#  returns vector x with outliers removed
ueda_remove <- function(x, smax = 2){
# set up
n <- length(x)
if(is.null(smax)) smax <- ifelse(n %% 2 == 0, n/2 - 1, (n - 1)/2)
if(smax > (n/2 - 1)) stop('smax can not be greater than ', n/2-1, '\n')
# automatic search
s <- 1:smax
search <- sapply(s, function(s) min(find_outliers(x, smax = s)$Ut))
where <- which(search == min(search))[[1]]
# what to do is outliers are found
if(where != 1) out <- find_outliers(x, smax = where)[[4]]
# no outliers
else{
out <- x
}
out
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
ueda_remove(x, smax = 5)
# ueda_index
# x is a numeric vector
# smax is the maximum number of outliers to be detected
# returns a list with 2 components:
#          (1) index TRUE/FALSE of outliers; and
#          (2) the position of the outliers in the data
ueda_index <- function(x, smax = 3){
res <- ueda_remove(x = x, smax = smax)
index <- !x %in% res
positions <- which(index)
list(index = index, positions = positions)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
ueda_index(x, smax = 5)
# ueda_index
# x is a numeric vector
# smax is the maximum number of outliers to be detected
# returns a list with 2 components:
#          (1) index TRUE/FALSE of outliers; and
#          (2) the position of the outliers in the data
ueda_index <- function(x, smax = 3){
res <- ueda_remove(x = x, smax = smax)
index <- !x %in% res
list(index = index, positions = which(index))
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
ueda_index(x, smax = 5)
ueda_remove(x, smax = 5)
# find outliers given a vector x using Ueda's method
# x is a vector; smax is the maximum number of outliers
# na.rm is passed when calculating mean(x, na.rm = na.rm)
find_ueda_outliers <- function(x, smax = NULL, na.rm = TRUE){
# Ut function
# x = data; s = number of outliers
ut <- function(x, s, na.rm = na.rm){
n <- length(x)
sigma <- sqrt(sum((x-mean(x))^2)/n) ###### see footnote 4
# The Stirling Formula is used to compute log n!
stirling <- function(x) 1/2*log(2*pi)+(1/2+x)*log(x)-x
ut <- n*log(sigma)+(sqrt(2)*stirling(n))/n*s
ut
}
# here begins the main function
sx <- scale(sort(x))
nmin <- 1
nmax <- length(sx)
# find smax based on the number of observations
if(is.null(smax)) smax <- ifelse(nmax %% 2 == 0, nmax/2 - 1, (nmax - 1)/2)
else smax <- smax
# search
s <- smax
r <- matrix(NA, ncol = s, nrow = s)
for(i in 0:(s-1)){
for(j in 0:(s-1)){
sini <- seq(nmin, nmin + i)
sfin <- seq(nmax, nmax - j)
r[i+1, j+1] <- ut(sx[-c(sini, sfin)], length(sini) + length(sfin))
}}
none <- ut(sx, 0)
toprow <- sapply(0:(s-1), function(s) ut(sx[-seq(nmin, nmin + s)], s + 1))
leftcol <- sapply(0:(s-1), function(s) ut(sx[-seq(nmax, nmax - s)], s + 1))
r <- cbind(c(none, toprow), rbind(leftcol, r))
r2 <- round(r, 3)
r <- ifelse(r2 == min(r2), paste0(r2, "*"), r2)
colnames(r) <- c('none', paste0('X', nmax:(nmax - s + 1)))
rownames(r) <- c('none', paste0('X', 1:(nmin + s - 1)))
r <- data.frame(r)
rownames(r2) <- rownames(r)
colnames(r2) <- colnames(r)
## get positions
pos <- as.numeric(which(r2 == min(r2) , arr.ind = TRUE))
srtx <- sort(x)
rr2 <- NULL
if(pos[1] == 1 & pos[2] != 1) rr2 <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(pos[1] != 1 & pos[2] == 1) rr2 <- srtx[-seq(1, pos[1])]
if(pos[1] != 1 & pos[2] != 1){
left <- srtx[-seq(1, pos[1])]
right <- srtx[-seq(nmax, nmax - pos[2] + 2)]
if(length(left) == 0 | length(right) == 0) rr2 <- rr2
else rr2 <- c(left, right)
}
# report
list(Ut = r2, label = r, x = srtx, x_new = rr2)
}
# example
set.seed(13)
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))   # introduce 5 outliers
x <- sample(x)
find_outliers(x, smax = 5)
find_ueda_outliers(x, smax = 5)
find_ueda_outliers(x, smax = 5)
require(ggplot2)
?ggplot2
require(pROC)
?pROC
?mean
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
ueda_remove(x, smax = 5)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
# random seed for reproducibility
set.seed(13)
# introduce 5 outliers
x <- c(rnorm(25, 300, 10), rnorm(5, 400, 5))
# shuffle the data
x <- sample(x)
# removes up to 5 outliers
ueda_remove(x, smax = 5)
ueda_index()
ueda_index(x)
ueda_index(x, smax = 5)
find_ueda_outliers(x, smax = 5)
?mean
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
library(ueda)
devtools::build_manual()
